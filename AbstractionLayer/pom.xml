<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>de.uos</groupId>
	<artifactId>de.uos.AbstractionLayer</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<tycho-version>1.0.0</tycho-version> <!--06-Feb-2017 -->
	</properties>
	<parent>
		<groupId>de.uos</groupId>
		<artifactId>de.uos.Java-IDE-API-AbstractionLayer</artifactId>
		<version>1.0.0-SNAPSHOT</version>
	</parent>

	<!-- only Eclipse and Java dependencies -->
	<dependencies>
		<dependency>
			<groupId>org.eclipse.osgi</groupId>
			<artifactId>org.eclipse.osgi</artifactId>
			<version>3.7.1</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.ui</groupId>
			<artifactId>workbench</artifactId>
			<version>3.3.0-I20070608-1100</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.swt</groupId>
			<artifactId>org.eclipse.swt.win32.win32.x86_64</artifactId>
			<version>4.3</version>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.service.event</artifactId>
			<version>1.3.1</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.platform</groupId>
			<artifactId>org.eclipse.e4.ui.workbench</artifactId>
			<version>1.4.0</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.platform</groupId>
			<artifactId>org.eclipse.core.resources</artifactId>
			<version>3.11.1</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.platform</groupId>
			<artifactId>org.eclipse.core.runtime</artifactId>
			<version>3.12.0</version>
		</dependency>

	</dependencies>
	<build>
		<resources>
			<resource>
				<directory>src/</directory>
				<includes>
					<include>**/eclipse/**</include>
					<include>**/AbstractionLayer/**</include>
					<include>**/ide/**</include>
					<include>**/META-INF/**</include>
					<include>.classpath</include>
					<include>.project</include>
					<include>.settings</include>
				</includes>
				<excludes>
					<exclude>**/netbeans/**</exclude>
					<exclude>**/intellij/**</exclude>
					<exclude>MANIFEST.MF</exclude>
				</excludes>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-maven-plugin</artifactId>
				<version>${tycho-version}</version>
				<extensions>true</extensions>
			</plugin>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>target-platform-configuration</artifactId>
				<version>${tycho-version}</version>
				<configuration>
					<environments>
						<environment>
							<os>win32</os>
							<ws>win32</ws>
							<arch>x86</arch>
						</environment>
						<environment>
							<os>linux</os>
							<ws>gtk</ws>
							<arch>x86_64</arch>
						</environment>
						<environment>
							<os>macosx</os>
							<ws>cocoa</ws>
							<arch>x86_64</arch>
						</environment>
					</environments>
				</configuration>
			</plugin>
			<!-- Create IntelliJ using Gradle -->
			<plugin>
				<!-- Using gradle-maven-plugin to execute maven from gradle There's currently 
					no way to build intellij from maven, since Jetbrains have clear focus on 
					Gradle. Configuration is done in build.gradle. Annotation: Plugin.xml has 
					to be generated by our library -->
				<groupId>org.fortasoft</groupId>
				<artifactId>gradle-maven-plugin</artifactId>
				<version>1.0.8</version>
				<configuration>
					<tasks>
						<!-- cleans up possible former builds -->
						<task>cleanIdea</task>
						<!-- sets up .iml file to access project via intellij -->
						<task>ideaModule</task>
						<!-- patching plugin.xml in case of newer version etc. -->
						<task>patchPluginXml</task>
						<!-- builds IntelliJ Plattform Plugin current build path is ${Project}/build/distribution -->
						<task>buildPlugin</task>
						<!-- IntelliJ make test -->
						<task>test</task>
						<!-- Run the plugin for testing purposes -->
						<task>runIde</task>
					</tasks>
				</configuration>
				<executions>
					<execution>
						<!-- You can bind this to any phase you like -->
						<phase>install</phase>
						<goals>
							<!-- goal has to be "invoke" to start -->
							<!-- <goal>invoke</goal> -->
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<name>AbstractionLayer</name>
</project>