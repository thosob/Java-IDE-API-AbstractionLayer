<?xml version="1.0" encoding="UTF-8"?>


<!-- You may freely edit this file. See harness/README in the NetBeans platform -->
<!-- for some information on what you could do (e.g. targets to override). -->
<!-- If you delete this file and reopen the project it will be recreated. -->
<project name="de.uos.AbstractionLayer" default="netbeans"
         basedir=".">
    <property name="src" location="src/" />
    <property name="build" location="build/" />
    <property name="dist" location ="dist/" />
    <path id="test.@{test.type}.cp">
        <!-- Cannot use <path refid="cp"/> since that uses ${module.classpath} and we want ${module.run.classpath}: -->
        <pathelement path="${test.@{test.type}.compile.cp}"/>
        <pathelement path="${cp.extra}"/>
        <pathelement location="${cluster}/${module.jar}"/>
        <path refid="test.unit.lib.cp"/>
        <!-- for compatibility with property based classpath-->
        <pathelement path="${module.run.classpath}"/>
        <pathelement path="${test.@{test.type}.cp.extra}"/>
    </path>
    <description>Builds, tests, and runs the project
        de.uos.AbstractionLayer.</description>
    <import file="nbproject/build-impl.xml" />
    <!-- hook into compile process -->
    <target name="compile">
        <mkdir dir="${build.classes.dir}"/>
        <depend srcdir="${src.dir}" destdir="${build.classes.dir}" cache="${build.dir}/depcache">
            <classpath refid="cp"/>
        </depend>
        <property name="javac.fork" value="false"/>
        <nb-javac srcdir="${src.dir}" destdir="${build.classes.dir}" debug="${build.compiler.debug}" debuglevel="${build.compiler.debuglevel}" encoding="UTF-8"
                  deprecation="${build.compiler.deprecation}" optimize="${build.compiler.optimize}" source="${javac.source}" target="${javac.target}" includeantruntime="false"
                  fork="${javac.fork}">
            <classpath refid="cp"/>
            <compilerarg line="${javac.compilerargs}"/>
            <processorpath refid="processor.cp"/>
            <exclude name="**/eclipse/**"></exclude>
            <exclude name="**/META-INF/**"></exclude>
            <exclude name="**/intellij/**"></exclude>            
            <exclude name="build.gradle"></exclude>
            <exclude name="AbstractionLayer.iml"></exclude>
            <exclude name=".classpath"></exclude>
            <exclude name=".project"></exclude>
        </nb-javac>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}" excludes="${jar-excludes}"/>
        </copy>
        <processjsannotation classes="${build.classes.dir}" asm="${asm.jar}">
            <classpath refid="cp"/>
        </processjsannotation>
        <mkdir dir="${basedir}/build/classes" />
        <!-- after setting up netbeans we need to call our maven file, which calls the gradle file -->
        <antcall target="mvn" />
    </target>
    
    <macrodef name="do-test-build">
        <attribute name="test.type"/>
        <sequential>
            <fail >
                Missing test dependency
                Runtime classpath: ${test.@{test.type}.runtime.cp}
                Compile classpath: ${test.@{test.type}.compile.cp}
                <condition>
                    <or>
                        <contains string="${test.@{test.type}.runtime.cp}" substring="-missing-Module-Entries-:" />
                        <contains string="${test.@{test.type}.compile.cp}" substring="-missing-Module-Entries-:" />
                    </or>
                </condition>
            </fail>
            <mkdir dir="${build.test.@{test.type}.classes.dir}"/>
            <depend srcdir="${test.@{test.type}.src.dir}" destdir="${build.test.@{test.type}.classes.dir}" cache="${build.test.@{test.type}.dir}/depcache">
                <classpath refid="test.@{test.type}.cp"/>
            </depend>
            <property name="test.excludes" value=""/> <!-- # 113770 -->
            <nb-javac srcdir="${test.@{test.type}.src.dir}" destdir="${build.test.@{test.type}.classes.dir}" excludes="${test.excludes}"
                      debug="true" deprecation="${build.compiler.deprecation}" encoding="UTF-8"
                      source="${javac.source}" target="${javac.target}" optimize="${build.compiler.optimize}" includeantruntime="false">
                <classpath refid="test.@{test.type}.cp"/>
                <compilerarg line="${javac.compilerargs}"/>
                <processorpath refid="test.@{test.type}.cp"/>
                <exclude name="**/eclipse/**"></exclude>
                <exclude name="**/META-INF/**"></exclude>
                <exclude name="**/intellij/**"></exclude>            
                <exclude name="build.gradle"></exclude>
                <exclude name="AbstractionLayer.iml"></exclude>
                <exclude name=".classpath"></exclude>
                <exclude name=".project"></exclude>
                
            </nb-javac>
            <processjsannotation classes="${build.test.@{test.type}.classes.dir}" asm="${asm.jar}">
                <classpath refid="test.@{test.type}.cp"/>
            </processjsannotation>
            <copy todir="${build.test.@{test.type}.classes.dir}">
                <fileset dir="${test.@{test.type}.src.dir}">
                    <exclude name="**/*.java"/>
                </fileset>
            </copy>
            <delete dir="${build.test.@{test.type}.dir}/data"/>
            <copy todir="${build.test.@{test.type}.dir}">
                <fileset dir="${test.@{test.type}.dir}">
                    <include name="data/**"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>
    <!-- being platform independent, but maven must be installed in environment -->
    <condition property="Windows">
        <os family="windows" />
    </condition>
    <condition property="Linux">
        <os family="unix" />
    </condition>
    <condition property="Mac">
        <os family="mac" />
    </condition>
    
    <target name="mvn" depends="mvnWindows, mvnLinux, mvnMac" />

    <target name="mvnWindows" if="Windows">
        <exec dir="." executable="cmd">
            <arg line="/c mvn clean install" />
        </exec>
    </target>

    <target name="mvnLinux" if="Linux">
        <exec dir="." executable="sh">
            <arg line="-c 'mvn clean install'" />
        </exec>
    </target>
    <!-- this is untested, could be wrong -->
    <target name="mvnMac" if="Mac">
        <exec dir="." executable="sh">
            <arg line="-c 'mvn clean install'" />
        </exec>
    </target> 
</project>
